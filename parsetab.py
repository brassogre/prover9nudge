
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = '\xb6\xa0\xcbh\xf7x\xbcL7o+3+h\xe3\xdb'
    
_lr_action_items = {'NOT_EQUAL':([8,12,23,],[19,-13,-18,]),'NAME':([0,4,10,15,17,19,20,24,],[1,14,22,1,1,29,29,33,]),')':([11,21,22,23,31,32,33,],[23,-15,-14,-18,-13,-17,-16,]),'(':([1,14,22,29,33,],[10,10,10,10,10,]),'-':([0,15,17,],[4,4,4,]),',':([11,21,22,23,31,32,33,],[24,-15,-14,-18,-13,-17,-16,]),'.':([2,5,6,7,9,12,13,23,25,26,27,28,30,31,],[-8,-6,16,18,-7,-10,-5,-18,-10,-4,-3,-12,-11,-13,]),'=':([8,12,23,],[20,-13,-18,]),'|':([2,5,6,7,9,12,13,23,25,26,27,28,30,31,],[-8,-6,15,17,-7,-10,-5,-18,-10,-4,-3,-12,-11,-13,]),'$end':([3,16,18,],[0,-2,-1,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'finished_argument_list':([1,14,22,29,33,],[12,25,31,31,31,]),'non_unit_clause':([0,],[6,]),'clause':([0,],[3,]),'predicate_expression':([0,4,15,17,],[5,13,5,5,]),'negated_equality_expression':([0,15,17,],[2,2,2,]),'argument_list':([1,14,22,29,33,],[11,11,11,11,11,]),'unit_clause':([0,15,17,],[7,26,27,]),'function_expression':([0,10,15,17,19,20,24,],[8,21,8,8,28,30,32,]),'equality_expression':([0,15,17,],[9,9,9,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> clause","S'",1,None,None,None),
  ('clause -> unit_clause .','clause',2,'p_clause','./ladrGrammar.py',20),
  ('clause -> non_unit_clause .','clause',2,'p_clause','./ladrGrammar.py',21),
  ('non_unit_clause -> unit_clause | unit_clause','non_unit_clause',3,'p_non_unit_clause','./ladrGrammar.py',25),
  ('non_unit_clause -> non_unit_clause | unit_clause','non_unit_clause',3,'p_non_unit_clause','./ladrGrammar.py',26),
  ('unit_clause -> - predicate_expression','unit_clause',2,'p_unit_clause','./ladrGrammar.py',30),
  ('unit_clause -> predicate_expression','unit_clause',1,'p_unit_clause','./ladrGrammar.py',31),
  ('unit_clause -> equality_expression','unit_clause',1,'p_unit_clause','./ladrGrammar.py',32),
  ('unit_clause -> negated_equality_expression','unit_clause',1,'p_unit_clause','./ladrGrammar.py',33),
  ('negated_predicate -> - predicate_expression','negated_predicate',2,'p_negated_predicate','./ladrGrammar.py',40),
  ('predicate_expression -> NAME finished_argument_list','predicate_expression',2,'p_predicate_expression','./ladrGrammar.py',44),
  ('equality_expression -> function_expression = function_expression','equality_expression',3,'p_equality_expression','./ladrGrammar.py',50),
  ('negated_equality_expression -> function_expression NOT_EQUAL function_expression','negated_equality_expression',3,'p_negated_equality_expression','./ladrGrammar.py',56),
  ('function_expression -> NAME finished_argument_list','function_expression',2,'p_function_expression','./ladrGrammar.py',62),
  ('argument_list -> ( NAME','argument_list',2,'p_argument_list_atomic_1','./ladrGrammar.py',68),
  ('argument_list -> ( function_expression','argument_list',2,'p_argument_list_atomic_2','./ladrGrammar.py',74),
  ('argument_list -> argument_list , NAME','argument_list',3,'p_argument_list_molecular_1','./ladrGrammar.py',78),
  ('argument_list -> argument_list , function_expression','argument_list',3,'p_argument_list_molecular_2','./ladrGrammar.py',83),
  ('finished_argument_list -> argument_list )','finished_argument_list',2,'p_finished_argument_list','./ladrGrammar.py',87),
]
